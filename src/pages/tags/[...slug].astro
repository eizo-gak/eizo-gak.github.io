---
import BlogCard from '@/components/BlogCard.astro'
import ArrowCard from '@/components/ArrowCard.astro'

import Breadcrumbs from '@/components/Breadcrumbs.astro'
import Container from '@/components/Container.astro'
import Layout from '@/layouts/Layout.astro'
import { Icon } from 'astro-icon/components'
import { type CollectionEntry, getCollection } from 'astro:content'

type BlogPost = CollectionEntry<'blog'>

type Props = {
  tag: string
  posts: BlogPost[]
}

const { tag, posts } = Astro.props

export async function getStaticPaths() {
  const posts = await getCollection('blog')
  const tags = posts.flatMap((post) => post.data.tags || [])
  const uniqueTags = Array.from(
    new Set(tags.filter((tag): tag is string => typeof tag === 'string')),
  )

  return uniqueTags.map((tag) => ({
    params: { slug: tag },
    props: {
      tag,
      posts: posts.filter((post) => post.data.tags?.includes(tag)),
    },
  }))
}
---

<Layout
  title={`#${tag} の記事一覧`}
  description={`A collection of posts tagged with ${tag}.`}
>
  <Container class="flex flex-col gap-y-6">
    <Breadcrumbs
      items={[
        { href: '/tags', label: 'Tags', icon: 'lucide:tags' },
        { label: tag, icon: 'lucide:tag' },
      ]}
    />
    <div class="flex flex-wrap items-center gap-2">
      <span
        class="flex items-center gap-x-1 rounded-full bg-secondary px-4 py-2 text-2xl font-semibold"
      >
        <Icon name="lucide:hash" class="size-6 -translate-x-0.5" />{tag}
      </span>
      <h1 class="text-3xl font-semibold">の 記事一覧</h1>
    </div>

    <div class="hidden lg:block flex flex-col gap-y-4">
      {
        posts
          .filter(post => post.data.date) // 日付が存在する投稿のみフィルタリング
          .sort((a, b) => {
            const dateA = new Date(a.data.date).getTime();
            const dateB = new Date(b.data.date).getTime();
            return dateB - dateA; // 日付の新しい順にソート
          })
          .map((post) => (
            <section class="flex flex-col gap-y-4">
              <div>
                <ul class="not-prose flex flex-col gap-4">
                  <li>
                    <BlogCard entry={post} />
                  </li>
                </ul>
              </div>
            </section>
          ))
      }
    </div>
    <div class="block lg:hidden flex flex-col gap-y-4">
      {
        posts
          .filter(post => post.data.date) // 日付が存在する投稿のみフィルタリング
          .sort((a, b) => {
            const dateA = new Date(a.data.date).getTime();
            const dateB = new Date(b.data.date).getTime();
            return dateB - dateA; // 日付の新しい順にソート
          })
          .map((post) => (
            <section class="flex flex-col gap-y-4">
              <div>
                <ul class="not-prose flex flex-col gap-4">
                  <li>
                    <ArrowCard entry={post} />
                  </li>
                </ul>
              </div>
            </section>
          ))
      }
    </div>

  </Container>
</Layout>
